(load "util.lisp")

(defparameter *field* (make-array '(10 10) :initial-element 0))
(defparameter *tinput* (map 'vector #'parse-integer (ppcre:all-matches-as-strings "[0-9]" (uiop:read-file-string "test11.txt"))))
(defparameter *input* (map 'vector #'parse-integer (ppcre:all-matches-as-strings "[0-9]" (fetch-input 11))))

(defun init (input)
  (loop for i from 0 below (length input)
	do (setf (row-major-aref *field* i) (elt input i))))

(defun flash (x y)
  (when (= (aref *field* x y) 10)
    (destructuring-bind (m n) (array-dimensions *field*)
      (dolist (delta '((-1 -1) (-1 0) (-1 1) (0 -1) (0 1) (1 -1) (1 0) (1 1)))
        (let ((i (+ x (first delta))) (j (+ y (second delta))))
          (when (and (<= 0 i (1- m)) (<= 0 j (1- n)))
            (incf (aref *field* i j))
            (flash i j)))))))

(defun evolve ()
  (destructuring-bind (m n) (array-dimensions *field*)
    (dotimes (i m)
      (dotimes (j n)
        (incf (aref *field* i j))
        (flash i j)))
    (let ((flashes 0))
      (dotimes (i m)
        (dotimes (j n)
          (when (> (aref *field* i j) 9)
            (incf flashes)
            (setf (aref *field* i j) 0))))
      flashes)))

(defun part1 (steps)
  (loop repeat steps sum (evolve)))

(defun part2 ()
  (let* ((n (array-total-size *field*)))
    (loop for step from 1 when (= (evolve) n) return step)))
